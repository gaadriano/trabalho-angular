{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../crud/agenda.service\";\nexport class AgendaResolverGuard {\n  constructor(service) {\n    this.service = service;\n  }\n  resolve(route, state) {\n    if (route.params && route.params['id']) {\n      return this.service.loadById(route.params['id']);\n    }\n    return of({\n      id: '',\n      nome: '',\n      telefone: '',\n      email: '',\n      empresa: ''\n    });\n  }\n  static #_ = this.ɵfac = function AgendaResolverGuard_Factory(t) {\n    return new (t || AgendaResolverGuard)(i0.ɵɵinject(i1.AgendaService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AgendaResolverGuard,\n    factory: AgendaResolverGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;;;AAOrC,OAAM,MAAOC,mBAAmB;EAE9BC,YACUC,OAAsB;IAAtB,YAAO,GAAPA,OAAO;EACb;EAEJC,OAAO,CAACC,KAA6B,EAAEC,KAA0B;IAC/D,IAAID,KAAK,CAACE,MAAM,IAAIF,KAAK,CAACE,MAAM,CAAC,IAAI,CAAC,EAAE;MACtC,OAAO,IAAI,CAACJ,OAAO,CAACK,QAAQ,CAACH,KAAK,CAACE,MAAM,CAAC,IAAI,CAAC,CAAC;;IAGlD,OAAOP,EAAE,CAAC;MACRS,EAAE,EAAE,EAAE;MACNC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;KACV,CAAC;EACJ;EAAC;qBAlBUZ,mBAAmB;EAAA;EAAA;WAAnBA,mBAAmB;IAAAa,SAAnBb,mBAAmB;IAAAc,YAFlB;EAAM","names":["of","AgendaResolverGuard","constructor","service","resolve","route","state","params","loadById","id","nome","telefone","email","empresa","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Gabriel\\Documents\\trabalho-angular\\src\\app\\agenda\\guards\\agenda-resolver.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { Agenda } from '../crud/agenda';\nimport { AgendaService } from '../crud/agenda.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgendaResolverGuard implements Resolve<Agenda> {\n\n  constructor(\n    private service: AgendaService\n  ) { }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Agenda> {\n    if (route.params && route.params['id']) {\n      return this.service.loadById(route.params['id']);\n    }\n\n    return of({\n      id: '',\n      nome: '',\n      telefone: '',\n      email: '',\n      empresa: ''\n    });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}